generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  OWNER
  CUSTOMER
}

model Account {
  id                String      @id @default(cuid())
  userId            String      @map("user_id")
  type              AccountType @default(CUSTOMER)
  provider          String
  providerAccountId String      @map("provider_account_id")
  refreshToken      String?     @map("refresh_token") @db.Text
  accessToken       String?     @map("access_token") @db.Text
  expiresAt         Int?        @map("expires_at")
  tokenType         String?     @map("token_type")
  scope             String?
  idToken           String?     @map("id_token") @db.Text
  sessionState      String?     @map("session_state")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  Address  Address[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Address {
  id        String    @id @default(cuid())
  street    String
  suite     String
  city      String
  zipcode   String    @map("zipcode")
  geoId     String    @unique @map("geo_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  geo    Geo     @relation(fields: [geoId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("address")
}

model Geo {
  id        String    @id @default(cuid())
  lat       Float
  lng       Float
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  address Address?

  @@map("geo")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}
